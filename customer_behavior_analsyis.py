# -*- coding: utf-8 -*-
"""customer behavior analsyis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aX6cUvdyvRalbUT1zqz7cVLwhrURlQUm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataframe
df_ecom = pd.read_csv('/content/ecommerce_customer_data_custom_ratios.csv')

# Inspect types
print(type(df_ecom))
print(df_ecom.dtypes)
print(df_ecom['Purchase Date'].head())

df_ecom['Purchase Date'] = pd.to_datetime(df_ecom['Purchase Date'], errors='coerce', infer_datetime_format=True)
print('Converted Purchase Date to datetime; nulls after conversion:')
print(df_ecom['Purchase Date'].isna().sum())

# Create unified age column
if 'Age' in df_ecom.columns and 'Customer Age' in df_ecom.columns:
    df_ecom['Age_final'] = df_ecom['Age'].fillna(df_ecom['Customer Age'])
elif 'Age' in df_ecom.columns:
    df_ecom['Age_final'] = df_ecom['Age']
elif 'Customer Age' in df_ecom.columns:
    df_ecom['Age_final'] = df_ecom['Customer Age']

# Drop rows with missing dates for time-based analysis only
mask_valid_date = df_ecom['Purchase Date'].notna()
print('Rows with valid dates:')
print(mask_valid_date.sum())

# Build time features on valid rows only
work = df_ecom.loc[mask_valid_date].copy()
work['Year'] = work['Purchase Date'].dt.year
work['Month'] = work['Purchase Date'].dt.to_period('M').astype(str)

# Monthly aggregates
monthly = work.groupby('Month').agg({
    'Total Purchase Amount':'sum',
    'Customer ID':'nunique'
}).rename(columns={'Customer ID':'Active Customers'}).sort_index()
print('Computed monthly aggregates head:')
print(monthly.head())

plt.figure(figsize=(10,5))
sns.lineplot(data=monthly, x=monthly.index, y='Total Purchase Amount')
plt.xticks(rotation=45)
plt.title('Monthly Revenue Trend')
plt.ylabel('Revenue')
plt.xlabel('Month')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,5))
sns.lineplot(data=monthly, x=monthly.index, y='Active Customers', color='orange')
plt.xticks(rotation=45)
plt.title('Monthly Active Customers')
plt.ylabel('Unique Customers')
plt.xlabel('Month')
plt.tight_layout()
plt.show()

# Category summary
category_summary = df_ecom.groupby('Product Category').agg({
    'Total Purchase Amount':'sum',
    'Customer ID':'nunique',
    'Quantity':'sum'
}).rename(columns={'Customer ID':'Unique Customers'})
orders_per_cat = df_ecom.groupby('Product Category')['Customer ID'].count()
category_summary['AOV'] = category_summary['Total Purchase Amount'] / orders_per_cat
print('Computed category summary head:')
print(category_summary.head())

plt.figure(figsize=(8,5))
category_share = (category_summary['Total Purchase Amount'] / category_summary['Total Purchase Amount'].sum()).sort_values(ascending=False)
sns.barplot(x=category_share.values, y=category_share.index, orient='h')
plt.title('Revenue Share by Category')
plt.xlabel('Share of Revenue')
plt.ylabel('Category')
plt.tight_layout()
plt.show()

# Payment method summary
payment_summary = df_ecom.groupby('Payment Method').agg({
    'Total Purchase Amount':'sum',
    'Customer ID':'nunique'
}).rename(columns={'Customer ID':'Unique Customers'})
print('Computed payment method summary:')
print(payment_summary.head())

plt.figure(figsize=(8,4))
sns.barplot(x=payment_summary.index, y=payment_summary['Total Purchase Amount'])
plt.title('Revenue by Payment Method')
plt.xlabel('Payment Method')
plt.ylabel('Revenue')
plt.tight_layout()
plt.show()

# Returns metrics
if 'Returns' in df_ecom.columns:
    returns_rate = df_ecom['Returns'].sum() / df_ecom.shape[0]
    returns_by_cat = df_ecom.groupby('Product Category')['Returns'].mean()
    print('Overall returns rate:')
    print(returns_rate)
    print('Returns rate by category head:')
    print(returns_by_cat.sort_values(ascending=False).head())

    plt.figure(figsize=(8,5))
    returns_by_cat_sorted = returns_by_cat.sort_values(ascending=False)
    sns.barplot(x=returns_by_cat_sorted.values, y=returns_by_cat_sorted.index, orient='h')
    plt.title('Returns Rate by Category')
    plt.xlabel('Returns Rate')
    plt.ylabel('Category')
    plt.tight_layout()
    plt.show()

# Cohort analysis
first_month = work.groupby('Customer ID')['Purchase Date'].min().dt.to_period('M').astype(str)
work['Cohort'] = work['Customer ID'].map(first_month)
work['OrderMonth'] = work['Purchase Date'].dt.to_period('M').astype(str)
cohort_pivot = work.groupby(['Cohort','OrderMonth'])['Customer ID'].nunique().reset_index()
cohort_pivot['Period'] = cohort_pivot.groupby('Cohort').cumcount()
cohort_sizes = cohort_pivot[cohort_pivot['Period'] == 0][['Cohort','Customer ID']].rename(columns={'Customer ID':'CohortSize'})
cohort_merged = cohort_pivot.merge(cohort_sizes, on='Cohort', how='left')
cohort_merged['Retention'] = cohort_merged['Customer ID'] / cohort_merged['CohortSize']
cohort_heat = cohort_merged.pivot(index='Cohort', columns='Period', values='Retention').fillna(0)
print('Cohort retention head:')
print(cohort_heat.head())

plt.figure(figsize=(10,6))
sns.heatmap(cohort_heat, cmap='Blues', annot=False)
plt.title('Customer Retention by Cohort')
plt.xlabel('Months Since First Purchase')
plt.ylabel('Cohort (First Purchase Month)')
plt.tight_layout()
plt.show()

# Churn relationships
if 'Churn' in df_ecom.columns:
    cust = df_ecom.groupby('Customer ID').agg({
        'Total Purchase Amount':'sum',
        'Quantity':'sum',
        'Product Price':'mean',
        'Age_final':'median',
        'Churn':'max'
    }).rename(columns={'Product Price':'Avg Item Price','Age_final':'Age'})
    print('Per-customer aggregates head:')
    print(cust.head())

    plt.figure(figsize=(6,4))
    sns.boxplot(x='Churn', y='Total Purchase Amount', data=cust.reset_index())
    plt.title('Spend vs Churn')
    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(6,4))
    sns.boxplot(x='Churn', y='Quantity', data=cust.reset_index())
    plt.title('Quantity vs Churn')
    plt.tight_layout()
    plt.show()

print('Analysis complete ')





































































































# Load the dataframe
df_ecom = pd.read_csv('/content/ecommerce_customer_data_custom_ratios.csv')